#lang s-exp "standard-lib.rkt"

; first-class addition function, called with 3 and 2
(cmdn
 (mu #s(nat-fun) (((p-apply #s(nat-fun) ((p-shift #s(shift-nat) () () ((p-varn #s(nat) () () ())))) ((p-varn #s(shift-pair-nat) () () ())) ())
                   (cmdn
                    (nvarn #s(shift-pair-nat) 0 () ())
                    (shiftp #s(shift-pair-nat) () ()
                            ((lambda #s(pair-nat) (((p-pair #s(pair-nat) ((p-zero #s(nat) () () ()) (p-var #s(nat) () () ())) () ())
                                                    (cmd (nvar #s(nat) 0 () ()) (var #s(nat) 0 () ())))
                                                   ((p-pair #s(pair-nat) ((p-succ #s(nat) ((p-var #s(nat) () () ())) () ())
                                                                          (p-var #s(nat) () () ())) () ())
                                                    (cmdn (recn #s(nat-fun) 0 () ())
                                                          (apply #s(nat-fun)
                                                                 ((shift #s(shift-nat) () ()
                                                                         ((lambda #s(nat) (((p-var #s(nat) () () ())
                                                                                            (cmd (nvar #s(nat) 0 () ())
                                                                                                 (succ #s(nat) ((var #s(nat) 2 () ())) () ())))
                                                                                          (cmd daemon #s(impossible) ()))))))
                                                                 ((mu #s(shift-pair-nat) (((p-shiftp #s(shift-pair-nat) () () ((p-varn #s(pair-nat) () () ())))
                                                                                           (cmd (nvar #s(pair-nat) 0 () ())
                                                                                                (pair #s(pair-nat) ((var #s(nat) 0 () ())
                                                                                                                    (var #s(nat) 1 () ())) () ())))
                                                                                          (cmd daemon #s(impossible) ()))))
                                                                 ())))
                                                   (cmd daemon #s(impossible) ())))))))
                  (cmdn daemon #s(impossible) ())))
 (apply #s(nat-fun)
        ((shift #s(shift-nat) () () ((lambda #s(nat) (((p-var #s(nat) () () ()) (cmd daemon #s(print) ((var #s(nat) 0 () ()))))
                                                      (cmd daemon #s(impossible) ()))))))
        ((mu #s(shift-pair-nat) (((p-shiftp #s(shift-pair-nat) () () ((p-varn #s(pair-nat) () () ())))
                                  (cmd (nvar #s(pair-nat) 0 () ())
                                       (pair #s(pair-nat)
                                             ((succ #s(nat) ((succ #s(nat) ((succ #s(nat) ((zero #s(nat) () () ())) () ())) () ())) () ())
                                              (succ #s(nat) ((succ #s(nat) ((zero #s(nat) () () ())) () ())) () ()))
                                             () ())))
                                 (cmdn daemon #s(impossible) ()))))
        ()))

#lang s-exp "data-example.rkt"

(lambda #s(bool) (((p-var #s(bool) () ()) (call (lambda #s(abstr-bool-unit-bool)
                                                  (((p-abstr-bool-unit-bool #s(abstr-bool-unit-bool)
                                                                          ((p-var #s(bool) () ()) (p-tt #s(unit) () ()))
                                                                          ((p-var #s(bool) () ())))
                                                    (call (var #s(bool) 0 ()) (var #s(bool) 0 ())))
                                                   (cmd daemon #s(impossible) ())))
                                                (abstr-bool-unit-bool #s(abstr-bool-unit-bool)
                                                                      ((var #s(bool) 0 ()) (tt #s(unit) () ()))
                                                                      ((lambda #s(bool) (((p-var #s(bool) () ()) (cmd daemon #s(print) ((var #s(bool) 1 ()))))
                                                                                         (cmd daemon #s(impossible) ())))))))
                  (cmd daemon #s(print) ((var #s(bool) 0 ())))))

;
;; boolean implication (directly "print"ed)
;; ========================================
;
;; 1. invoked with (true, true)
;(cmd (lambda #s(prod-bool)
;       (((p-pair #s(prod-bool) ((p-true #s(bool) () ()) (p-false #s(bool) () ())) ()) (cmd daemon #s(print) ((false #s(bool) () ()))))
;        ((p-pair #s(prod-bool) ((p-true #s(bool) () ()) (p-true #s(bool) () ())) ()) (cmd daemon #s(print) ((true #s(bool) () ()))))
;        ((p-pair #s(prod-bool) ((p-false #s(bool) () ()) (p-var #s(bool) () ())) ()) (cmd daemon #s(print) ((true #s(bool) () ()))))
;        (cmd daemon #s(impossible) ())))
;     (pair #s(prod-bool) ((true #s(bool) () ()) (true #s(bool) () ())) ()))
;
;; 2. invoked with (true, false)
;(cmd (lambda #s(prod-bool)
;       (((p-pair #s(prod-bool) ((p-true #s(bool) () ()) (p-false #s(bool) () ())) ()) (cmd daemon #s(print) ((false #s(bool) () ()))))
;        ((p-pair #s(prod-bool) ((p-true #s(bool) () ()) (p-true #s(bool) () ())) ()) (cmd daemon #s(print) ((true #s(bool) () ()))))
;        ((p-pair #s(prod-bool) ((p-false #s(bool) () ()) (p-var #s(bool) () ())) ()) (cmd daemon #s(print) ((true #s(bool) () ()))))
;        (cmd daemon #s(impossible) ())))
;     (pair #s(prod-bool) ((true #s(bool) () ()) (false #s(bool) () ())) ()))
;
;; 3. invoked with (false, true)
;(cmd (lambda #s(prod-bool)
;       (((p-pair #s(prod-bool) ((p-true #s(bool) () ()) (p-false #s(bool) () ())) ()) (cmd daemon #s(print) ((false #s(bool) () ()))))
;        ((p-pair #s(prod-bool) ((p-true #s(bool) () ()) (p-true #s(bool) () ())) ()) (cmd daemon #s(print) ((true #s(bool) () ()))))
;        ((p-pair #s(prod-bool) ((p-false #s(bool) () ()) (p-var #s(bool) () ())) ()) (cmd daemon #s(print) ((true #s(bool) () ()))))
;        (cmd daemon #s(impossible) ())))
;     (pair #s(prod-bool) ((false #s(bool) () ()) (true #s(bool) () ())) ()))
;
;; 4. invoked with (false, false)
;(cmd (lambda #s(prod-bool)
;       (((p-pair #s(prod-bool) ((p-true #s(bool) () ()) (p-false #s(bool) () ())) ()) (cmd daemon #s(print) ((false #s(bool) () ()))))
;        ((p-pair #s(prod-bool) ((p-true #s(bool) () ()) (p-true #s(bool) () ())) ()) (cmd daemon #s(print) ((true #s(bool) () ()))))
;        ((p-pair #s(prod-bool) ((p-false #s(bool) () ()) (p-var #s(bool) () ())) ()) (cmd daemon #s(print) ((true #s(bool) () ()))))
;        (cmd daemon #s(impossible) ())))
;     (pair #s(prod-bool) ((false #s(bool) () ()) (false #s(bool) () ())) ()))
;
;; alternative implementation which additionally prints the input, invoked with (false, false)
;(cmd (lambda #s(prod-bool)
;       (((p-pair #s(prod-bool) ((p-true #s(bool) () ()) (p-false #s(bool) () ())) ())
;         (cmd daemon #s(print-result-and-input)
;              ((false #s(bool) () ())
;               (pair #s(prod-bool) ((true #s(bool) () ()) (false #s(bool) () ())) ()))))
;        ((p-var #s(prod-bool) () ())
;         (cmd daemon #s(print-result-and-input)
;              ((true #s(bool) () ())
;               (var #s(prod-bool) 0 ()))))
;        (cmd daemon #s(impossible) ())))
;     (pair #s(prod-bool) ((false #s(bool) () ()) (false #s(bool) () ())) ()))
